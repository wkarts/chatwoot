# #
# # This action will publish Chatwoot CE docker image.
# # This is set to run against merges to develop, master
# # and when tags are created.
# #

name: Publish Chatwoot CE docker images for ARM64

on:
  push:
    branches:
      - develop
      - master
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: wkarts/hub-arm
      GIT_REF: ${{ github.head_ref || github.ref_name }}
    timeout-minutes: 360

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Make custom changes
        run: |
          sed -i 's/"name": "Teste"/"name": "ðŸ…·ðŸ†„ðŸ…±"/g' public/manifest.json
          sed -i 's/"short_name": "Teste"/"short_name": "ðŸ…·ðŸ†„ðŸ…±"/g' public/manifest.json

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0
        with:
          platforms: 'arm64'
        env:
          QEMU_CPU: 'max'
          QEMU_THREADS: 4

      - name: Set Timezone to UTC America/Bahia
        run: |
          sudo timedatectl set-timezone America/Bahia

      - name: Sync System Time
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ntp
          sudo systemctl stop ntp
          sudo ntpd -gq
          sudo systemctl start ntp

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.6.1

      - name: Set up Docker tags
        id: docker_tag
        run: |
          echo "TAGS=${IMAGE_NAME}:${GIT_REF}" >> $GITHUB_ENV
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "LATEST_TAG=${IMAGE_NAME}:latest" >> $GITHUB_ENV
          fi

      - name: Login to DockerHub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/yarn
          key: yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-cache-

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Download dependencies
        run: |
          mkdir -p ~/.cache/yarn/offline-mirror
          grep -o 'https://[^ ]*.tgz' yarn.lock | while read url; do wget -P ~/.cache/yarn/offline-mirror $url; done

      - name: Configure Yarn to use cached packages
        run: |
          yarn config set yarn-offline-mirror ~/.cache/yarn/offline-mirror
          yarn config set yarn-offline-mirror-pruning true

      - name: Install dependencies with Yarn
        run: yarn install --offline --pure-lockfile

      - name: Build and push arm64 image
        uses: docker/build-push-action@v6.5.0
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/arm64
          push: true
          tags: |
            ${{ env.TAGS }}
            ${{ env.LATEST_TAG }}

